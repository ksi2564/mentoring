package org.ssafy.mentoring.mock;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.ssafy.mentoring.common.domain.exception.ResourceNotFoundException;
import org.ssafy.mentoring.mentorship.domain.Mentorship;
import org.ssafy.mentoring.mentorship.domain.MentorshipStatus;
import org.ssafy.mentoring.mentorship.serivce.port.MentorshipRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMentorshipRepository implements MentorshipRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Mentorship> data = new ArrayList<>();

    @Override
    public Mentorship getById(Long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Mentorship", id));
    }

    @Override
    public Optional<Mentorship> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Mentorship save(Mentorship mentorship) {
        if (mentorship.getId() == null || mentorship.getId() == 0) {
            Mentorship newMentorship = Mentorship.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(mentorship.getTitle())
                    .content(mentorship.getContent())
                    .fee(mentorship.getFee())
                    .status(mentorship.getStatus())
                    .createdAt(mentorship.getCreatedAt())
                    .updatedAt(mentorship.getUpdatedAt())
                    .mentor(mentorship.getMentor())
                    .build();
            data.add(newMentorship);
            return newMentorship;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), mentorship.getId()));
            data.add(mentorship);
            return mentorship;
        }
    }

    @Override
    public Page<Mentorship> findAllByStatus(MentorshipStatus status, Pageable pageable) {
        List<Mentorship> pageContent = data.stream()
                .filter(item -> item.getStatus().equals(status))
                .skip(pageable.getOffset())
                .limit(pageable.getPageSize())
                .toList();
        long totalElements = data.stream()
                .filter(item -> item.getStatus().equals(status))
                .count();
        return new PageImpl<>(pageContent, pageable, totalElements);
    }
}
